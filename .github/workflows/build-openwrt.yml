#=================================================
# https://github.com/roacn/build-actions
# Description: Build OpenWrt using GitHub Actions
# Lisence: GNU General Public License v3.0
# Author: Ss.
#=================================================

name: 触发通用机型编译
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '[ssh-actions]改成[ssh],再按[Run workflow]按钮启动,则开启SSH连接配置固件'
        required: false
        default: 'ssh'
      days:
        description: '清理[X]天之前的Actions空间操作记录(可改)'
        required: true
        default: '7'
      rele:
        description: '保留[X]个Releases不被删除(可改)'
        required: true
        default: '6'


# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  #schedule:
   #- cron: 45 6 * * 5

# 注意：为保证触发正常，请修改BUILDYML、COMPILEYML、EVENT_TYPE，其中前2个为文件名，第3个为自定义，保证在上面2个文件内定义一致，但要避免与其它文件内重复。
env:
  BUILDYML: build-openwrt.yml
  COMPILEYML: compile.yml
  EVENT_TYPE: 编译通用机型固件
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Apidz: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    name: 启动${{matrix.target}}编译
    strategy:
      fail-fast: false
      matrix:
        target: [Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

        # [Lede_source,Lede_source_lxc,Lede_source_x86,Lede_source_R3P,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]
        
    steps:
    - name: 准备结束
      uses: actions/checkout@v3

    - name: 读取脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "PVE_LXC=${PVE_LXC}" >> $GITHUB_ENV
        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "AUTOMATIC_AMLOGIC=${AUTOMATIC_AMLOGIC}" >> $GITHUB_ENV
        echo "BUILDSOC=${BUILDSOC}" >> $GITHUB_ENV
        echo "KERNEL=${KERNEL}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "UNLOCK_PARTITIONS=${UNLOCK_PARTITIONS}" >> $GITHUB_ENV
        echo "CangKu=${Apidz##*/}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV
        
    - name: 读取扩展文件
      run: |
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=amlogic" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "22.03" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
          echo "OpenWrt_name=20.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Tianling" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06_tl" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
          echo "OpenWrt_name=21.02" >> $GITHUB_ENV
        else
          echo "没发现该源码的分支，如果您没更改过的话，应该是上游仓库修改了，请同步上游仓库"
          exit 1
        fi
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y subversion build-essential libncurses5-dev openssl libssl-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /workdir
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt > /dev/null 2>&1
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a > /dev/null 2>&1
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
 
    - name: 加载源,补丁和自定义设置
      run: |
        cp -rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "main" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          source "${PATH1}/common.sh" && Diy_Tianling
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all > /dev/null 2>&1
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a > /dev/null 2>&1
        ./scripts/feeds install -a -p openwrt-packages
        ./scripts/feeds install -a > /dev/null 2>&1
        [[ -e "$PATH1/${CONFIG_FILE}" ]] && cp "$PATH1/${CONFIG_FILE}" .config
        if [[ "${REGULAR_UPDATE}" == "true" ]]; then
          source "${PATH1}/upgrade.sh" && Diy_Part1
        fi
        
    - name: SSH远程连接（制作.config配置文件）
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: danshui-git/debugger-action@main
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      id: compileop
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chajian > /dev/null 2>&1
        make defconfig > /dev/null 2>&1
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/${CONFIG_FILE}
        cp -rf ${GITHUB_WORKSPACE}/${CONFIG_FILE} ${GITHUB_WORKSPACE}/config.txt
        echo "COMPILESTATUS=success" >> $GITHUB_ENV
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
        if [ `grep -c "CONFIG_TARGET_x86_64=y" .config` -eq '1' ]; then
            echo "TARGET_PROFILE=x86-64" >> $GITHUB_ENV
        elif [[ `grep -c "CONFIG_TARGET_x86=y" .config` == '1' ]] && [[ `grep -c "CONFIG_TARGET_x86_64=y" .config` == '0' ]]; then
            echo "TARGET_PROFILE=x86_32" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET.*DEVICE.*=y" .config` -eq '1' ]; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "TARGET_PROFILE=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "TARGET_PROFILE=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        fi
        
    - name: 上传.config配置文件在 github actions
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt
        
    - name: 整理REPO
      continue-on-error: true
      if: env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        yn_target="false"
        yn_config="false"
        git clone -b main https://github.com/${{github.repository}}.git repo
        TARGET1=$(grep 'target: \[' $GITHUB_WORKSPACE/.github/workflows/${{ env.COMPILEYML }} | sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/') && echo "TARGET1=${TARGET1}"
        TARGET2=$(grep 'target: \[' $GITHUB_WORKSPACE/.github/workflows/${{env.BUILDYML}}  |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/') && echo "TARGET2=${TARGET2}"
        if [[ -n "${TARGET1}" ]] && [[ -n "${TARGET2}" ]] && [[ "${TARGET1}" != "${TARGET2}" ]]; then
          sed -i "s/${TARGET1}/${TARGET2}/g" repo/.github/workflows/${{env.COMPILEYML}} && echo "change ${TARGET1} to ${TARGET2}"
          yn_target="true"
        fi
        if [[ `cat $GITHUB_WORKSPACE/${CONFIG_FILE}` != `cat $PATH1/${CONFIG_FILE}` ]]; then
          yn_config="true"
        fi
        cd ${Home}
        source "${PATH1}/common.sh" && Diy_plugin 2>/dev/null
        cd $GITHUB_WORKSPACE/repo
        if [[ -n "$(ls -A "build/${{matrix.target}}/${CONFIG_FILE}" 2>/dev/null)" ]]; then
          git rm -rf build/${{matrix.target}}/${CONFIG_FILE}
        fi
        cp -rf $GITHUB_WORKSPACE/${CONFIG_FILE} build/${{matrix.target}}/${CONFIG_FILE} && echo "copy $GITHUB_WORKSPACE/${CONFIG_FILE} to build/${{matrix.target}}/${CONFIG_FILE}"
        #githead=`git log --oneline | sed -n '1p' | cut -d " " -f1`
        #sed -i '/plugin/d' ${{ env.PATH1 }}/releaseinfo.md
        #cat >> ${{ env.PATH1 }}/releaseinfo.md <<-EOF
        #- [x] [plugin](${{ env.Github }}/blob/${githead}/build/${{ env.Modelfile }}/plugin)
        #EOF
        echo "yn_target=${yn_target}; yn_config=${yn_config}"
        if [[ ${yn_target} == "true" ]] || [[ ${yn_config} == "true" ]]; then
          git add .
          git commit -m "Update plugin and ${CONFIG_FILE}"
          git push --force "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
        else
          echo "Your branch is up to date with 'origin/main'. Nothing to commit, working tree clean"
        fi
        
    - name: 编译信息
      continue-on-error: true
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chuli > /dev/null 2>&1
        if [ "${BY_INFORMATION}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && GET_TARGET_INFO
          source "${PATH1}/common.sh" && Diy_xinxi
        fi
        
  compile-dispatch:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    steps:
    - name: 触发yml启动"${{matrix.target}}"编译
      continue-on-error: true
      run: |
        curl \
        -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
        -d '{"event_type": "${{ env.EVENT_TYPE }}"}'
        
  delete-releases-artifacts:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: 读取设置
      run: |
        [ ${{ github.event.inputs.rele }} ] && echo "keep_latest=${{ github.event.inputs.rele }}" >> $GITHUB_ENV || echo "keep_latest=6" >> $GITHUB_ENV
        [ ${{ github.event.inputs.days }} ] && echo "retain_days=${{ github.event.inputs.days }}" >> $GITHUB_ENV || echo "retain_days=7" >> $GITHUB_ENV
        
    - name: 清理Actions空间
      if: env.REPO_TOKEN
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          keep_minimum_runs: 0
          retain_days: ${{ env.retain_days }}
    
    - name: 删除releases
      if: env.REPO_TOKEN
      uses: roacn/delete-older-releases@master
      with:
        repo: ${{ github.repository }}
        keep_latest: ${{ env.keep_latest }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
